{"code":"//接口异常采集\r\nimport reportTracker from \"../../utils/publicReport\";\r\nfunction requestCatch(type1, type2) {\r\n    //开启fetch监控\r\n    fetchCatch();\r\n    let oldopen = XMLHttpRequest.prototype[type1];\r\n    let oldosend = XMLHttpRequest.prototype[type2];\r\n    let logData = {\r\n        method: \"\",\r\n        url: \"\",\r\n    };\r\n    XMLHttpRequest.prototype.open = function (method, url, async) {\r\n        logData = {\r\n            method,\r\n            url,\r\n        };\r\n        return oldopen.apply(this, arguments);\r\n    };\r\n    let startTime;\r\n    XMLHttpRequest.prototype.send = function (body) {\r\n        if (logData) {\r\n            //发送时候记录时间\r\n            startTime = Date.now();\r\n            const handler = (type) => (event) => {\r\n                let duration = Date.now() - startTime;\r\n                let status = this.status;\r\n                let statusText = this.statusText;\r\n                let requestInfo = {\r\n                    type: \"xhr\",\r\n                    eventType: event.type,\r\n                    pathName: logData.url,\r\n                    status: status + \"-\" + statusText,\r\n                    duration,\r\n                    response: this.response ? JSON.stringify(this.response) : \"\",\r\n                    params: body || \"\",\r\n                };\r\n                reportTracker(\"http://localhost:9000/tracker\", requestInfo);\r\n            };\r\n            this.addEventListener(\"load\", handler(\"load\"), false);\r\n            this.addEventListener(\"error\", handler(\"error\"), false);\r\n            this.addEventListener(\"abort\", handler(\"abort\"), false);\r\n        }\r\n        oldosend.apply(this, arguments);\r\n    };\r\n}\r\nfunction fetchCatch() {\r\n    let originFetch = window.fetch;\r\n    window.fetch = function (input, init) {\r\n        let startTime = Date.now();\r\n        let args = arguments;\r\n        let fetchInput = args[0];\r\n        let method = \"GET\";\r\n        let url;\r\n        if (typeof fetchInput === \"string\") {\r\n            url = fetchInput;\r\n        }\r\n        else if (\"Request\" in window && fetchInput instanceof window.Request) {\r\n            url = fetchInput.url;\r\n            if (fetchInput.method) {\r\n                method = fetchInput.method;\r\n            }\r\n        }\r\n        else {\r\n            url = \"\" + fetchInput;\r\n        }\r\n        if (args[1] && args[1].method) {\r\n            method = args[1].method;\r\n        }\r\n        let fetchData = {\r\n            method: method,\r\n            pathName: url,\r\n            status: 0,\r\n            type: \"\",\r\n            duration: 0,\r\n            response: \"null\",\r\n            params: (init === null || init === void 0 ? void 0 : init.body) || \"\",\r\n        };\r\n        return originFetch.apply(this, arguments).then(function (response) {\r\n            fetchData.status = response.status;\r\n            fetchData.type = \"fetch\";\r\n            fetchData.duration = Date.now() - startTime;\r\n            console.log(fetchData);\r\n            return response;\r\n        });\r\n    };\r\n}\r\nexport default requestCatch;\r\n","references":["F:/gitwork/reGuard-sdk/src/utils/publicReport.ts"]}
