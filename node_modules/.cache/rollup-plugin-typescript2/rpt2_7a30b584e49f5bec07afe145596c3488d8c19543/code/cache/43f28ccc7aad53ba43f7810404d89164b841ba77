{"code":"import { TrackerConfig } from \"../type/index\";\r\nimport { createHistoryEvent, captureEvents } from \"../lib/userBehavior/pv\";\r\nimport FPTracker from \"../lib/pageRender/FP\";\r\nimport handleDOMContentLoaded from \"../lib/handleDOM/handleDOMContentLoaded\";\r\nimport handleTargetDOM from \"../lib/handleDOM/handleTargetDOM\";\r\nimport JsErrorTracker from \"../lib/handleError/jsError\";\r\nimport resourceErrorTracker from \"../lib/handleError/resourceError\";\r\nimport requestTracker from \"../lib/handleRequest/handleRequest\";\r\nimport blankScreen from \"../lib/pageRender/blankScreen\";\r\nimport performanceIndex from \"../lib/performanceIndex/navigationTiming\";\r\nexport default class Tracker {\r\n    constructor(options) {\r\n        this.options = Object.assign(this.initDef(), options);\r\n        localStorage.setItem('info', JSON.stringify(this.options));\r\n        this.installTracker();\r\n    }\r\n    // 初始化函数\r\n    initDef() {\r\n        window.history[\"pushState\"] = createHistoryEvent(\"pushState\");\r\n        window.history[\"replaceState\"] = createHistoryEvent(\"replaceState\");\r\n        return {\r\n            sdkVersion: TrackerConfig.version,\r\n        };\r\n    }\r\n    installTracker() {\r\n        //history模式监控pv\r\n        if (this.options.historyTracker) {\r\n            let startTime = Date.now();\r\n            captureEvents([\"pushState\", \"replaceState\", \"popstate\"], \"history-pv\", { startTime, stayTime: 0 });\r\n        }\r\n        //hash模式pv\r\n        if (this.options.hashTracker) {\r\n            captureEvents([\"hashchange\"], \"hash-pv\");\r\n        }\r\n        //Fp监控\r\n        if (this.options.FPTracker) {\r\n            FPTracker(this.options.FCPTracker);\r\n        }\r\n        //dom监听\r\n        if (this.options.DOMTracker) {\r\n            handleDOMContentLoaded();\r\n            handleTargetDOM();\r\n        }\r\n        //js监听\r\n        if (this.options.jsError) {\r\n            JsErrorTracker();\r\n        }\r\n        //请求监听\r\n        if (this.options.requestTracker) {\r\n            requestTracker(\"open\", \"send\");\r\n        }\r\n        //资源加载错误监听\r\n        if (this.options.resourceError) {\r\n            resourceErrorTracker();\r\n        }\r\n        //白屏监听\r\n        if (this.options.screenTracker) {\r\n            blankScreen();\r\n        }\r\n        // 性能指标\r\n        if (this.options.performanceIndex) {\r\n            performanceIndex();\r\n        }\r\n    }\r\n}\r\n","references":["F:/gitwork/reGuard-sdk/src/type/index.ts","F:/gitwork/reGuard-sdk/src/type/index.ts","F:/gitwork/reGuard-sdk/src/lib/userBehavior/pv.ts","F:/gitwork/reGuard-sdk/src/lib/pageRender/FP.ts","F:/gitwork/reGuard-sdk/src/lib/handleDOM/handleDOMContentLoaded.ts","F:/gitwork/reGuard-sdk/src/lib/handleDOM/handleTargetDOM.ts","F:/gitwork/reGuard-sdk/src/lib/handleError/jsError.ts","F:/gitwork/reGuard-sdk/src/lib/handleError/resourceError.ts","F:/gitwork/reGuard-sdk/src/lib/handleRequest/handleRequest.ts","F:/gitwork/reGuard-sdk/src/lib/pageRender/blankScreen.ts","F:/gitwork/reGuard-sdk/src/lib/performanceIndex/navigationTiming.ts"]}
